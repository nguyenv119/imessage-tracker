// This file is generated by rust-protobuf 3.7.2. Do not edit
// .proto file is parsed by pure
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `src/message_types/handwriting/handwriting.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_7_2;

// @@protoc_insertion_point(message:handwriting.BaseMessage)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct BaseMessage {
    // message fields
    // @@protoc_insertion_point(field:handwriting.BaseMessage.CreatedAt)
    pub CreatedAt: i64,
    // @@protoc_insertion_point(field:handwriting.BaseMessage.ID)
    pub ID: ::std::string::String,
    // @@protoc_insertion_point(field:handwriting.BaseMessage.Handwriting)
    pub Handwriting: ::protobuf::MessageField<Handwriting>,
    // special fields
    // @@protoc_insertion_point(special_field:handwriting.BaseMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a BaseMessage {
    fn default() -> &'a BaseMessage {
        <BaseMessage as ::protobuf::Message>::default_instance()
    }
}

impl BaseMessage {
    pub fn new() -> BaseMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(3);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "CreatedAt",
            |m: &BaseMessage| { &m.CreatedAt },
            |m: &mut BaseMessage| { &mut m.CreatedAt },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "ID",
            |m: &BaseMessage| { &m.ID },
            |m: &mut BaseMessage| { &mut m.ID },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, Handwriting>(
            "Handwriting",
            |m: &BaseMessage| { &m.Handwriting },
            |m: &mut BaseMessage| { &mut m.Handwriting },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<BaseMessage>(
            "BaseMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for BaseMessage {
    const NAME: &'static str = "BaseMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                17 => {
                    self.CreatedAt = is.read_sfixed64()?;
                },
                26 => {
                    self.ID = is.read_string()?;
                },
                34 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.Handwriting)?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if self.CreatedAt != 0 {
            my_size += 1 + 8;
        }
        if !self.ID.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.ID);
        }
        if let Some(v) = self.Handwriting.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if self.CreatedAt != 0 {
            os.write_sfixed64(2, self.CreatedAt)?;
        }
        if !self.ID.is_empty() {
            os.write_string(3, &self.ID)?;
        }
        if let Some(v) = self.Handwriting.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(4, v, os)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> BaseMessage {
        BaseMessage::new()
    }

    fn clear(&mut self) {
        self.CreatedAt = 0;
        self.ID.clear();
        self.Handwriting.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static BaseMessage {
        static instance: BaseMessage = BaseMessage {
            CreatedAt: 0,
            ID: ::std::string::String::new(),
            Handwriting: ::protobuf::MessageField::none(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for BaseMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("BaseMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for BaseMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for BaseMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

// @@protoc_insertion_point(message:handwriting.Handwriting)
#[derive(PartialEq,Clone,Default,Debug)]
pub struct Handwriting {
    // message fields
    // @@protoc_insertion_point(field:handwriting.Handwriting.Frame)
    pub Frame: ::std::vec::Vec<u8>,
    // @@protoc_insertion_point(field:handwriting.Handwriting.StrokesCount)
    pub StrokesCount: i64,
    // @@protoc_insertion_point(field:handwriting.Handwriting.Compression)
    pub Compression: ::protobuf::EnumOrUnknown<Compression>,
    // @@protoc_insertion_point(field:handwriting.Handwriting.DecompressedLength)
    pub DecompressedLength: ::std::option::Option<i64>,
    // @@protoc_insertion_point(field:handwriting.Handwriting.Strokes)
    pub Strokes: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:handwriting.Handwriting.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Handwriting {
    fn default() -> &'a Handwriting {
        <Handwriting as ::protobuf::Message>::default_instance()
    }
}

impl Handwriting {
    pub fn new() -> Handwriting {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(5);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Frame",
            |m: &Handwriting| { &m.Frame },
            |m: &mut Handwriting| { &mut m.Frame },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "StrokesCount",
            |m: &Handwriting| { &m.StrokesCount },
            |m: &mut Handwriting| { &mut m.StrokesCount },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Compression",
            |m: &Handwriting| { &m.Compression },
            |m: &mut Handwriting| { &mut m.Compression },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "DecompressedLength",
            |m: &Handwriting| { &m.DecompressedLength },
            |m: &mut Handwriting| { &mut m.DecompressedLength },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "Strokes",
            |m: &Handwriting| { &m.Strokes },
            |m: &mut Handwriting| { &mut m.Strokes },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Handwriting>(
            "Handwriting",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Handwriting {
    const NAME: &'static str = "Handwriting";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                26 => {
                    self.Frame = is.read_bytes()?;
                },
                32 => {
                    self.StrokesCount = is.read_int64()?;
                },
                40 => {
                    self.Compression = is.read_enum_or_unknown()?;
                },
                48 => {
                    self.DecompressedLength = ::std::option::Option::Some(is.read_int64()?);
                },
                66 => {
                    self.Strokes = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.Frame.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.Frame);
        }
        if self.StrokesCount != 0 {
            my_size += ::protobuf::rt::int64_size(4, self.StrokesCount);
        }
        if self.Compression != ::protobuf::EnumOrUnknown::new(Compression::Unknown) {
            my_size += ::protobuf::rt::int32_size(5, self.Compression.value());
        }
        if let Some(v) = self.DecompressedLength {
            my_size += ::protobuf::rt::int64_size(6, v);
        }
        if !self.Strokes.is_empty() {
            my_size += ::protobuf::rt::bytes_size(8, &self.Strokes);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.Frame.is_empty() {
            os.write_bytes(3, &self.Frame)?;
        }
        if self.StrokesCount != 0 {
            os.write_int64(4, self.StrokesCount)?;
        }
        if self.Compression != ::protobuf::EnumOrUnknown::new(Compression::Unknown) {
            os.write_enum(5, ::protobuf::EnumOrUnknown::value(&self.Compression))?;
        }
        if let Some(v) = self.DecompressedLength {
            os.write_int64(6, v)?;
        }
        if !self.Strokes.is_empty() {
            os.write_bytes(8, &self.Strokes)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Handwriting {
        Handwriting::new()
    }

    fn clear(&mut self) {
        self.Frame.clear();
        self.StrokesCount = 0;
        self.Compression = ::protobuf::EnumOrUnknown::new(Compression::Unknown);
        self.DecompressedLength = ::std::option::Option::None;
        self.Strokes.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Handwriting {
        static instance: Handwriting = Handwriting {
            Frame: ::std::vec::Vec::new(),
            StrokesCount: 0,
            Compression: ::protobuf::EnumOrUnknown::from_i32(0),
            DecompressedLength: ::std::option::Option::None,
            Strokes: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Handwriting {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Handwriting").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Handwriting {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Handwriting {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(Clone,Copy,PartialEq,Eq,Debug,Hash)]
// @@protoc_insertion_point(enum:handwriting.Compression)
pub enum Compression {
    // @@protoc_insertion_point(enum_value:handwriting.Compression.Unknown)
    Unknown = 0,
    // @@protoc_insertion_point(enum_value:handwriting.Compression.None)
    None = 1,
    // @@protoc_insertion_point(enum_value:handwriting.Compression.XZ)
    XZ = 4,
}

impl ::protobuf::Enum for Compression {
    const NAME: &'static str = "Compression";

    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<Compression> {
        match value {
            0 => ::std::option::Option::Some(Compression::Unknown),
            1 => ::std::option::Option::Some(Compression::None),
            4 => ::std::option::Option::Some(Compression::XZ),
            _ => ::std::option::Option::None
        }
    }

    fn from_str(str: &str) -> ::std::option::Option<Compression> {
        match str {
            "Unknown" => ::std::option::Option::Some(Compression::Unknown),
            "None" => ::std::option::Option::Some(Compression::None),
            "XZ" => ::std::option::Option::Some(Compression::XZ),
            _ => ::std::option::Option::None
        }
    }

    const VALUES: &'static [Compression] = &[
        Compression::Unknown,
        Compression::None,
        Compression::XZ,
    ];
}

impl ::protobuf::EnumFull for Compression {
    fn enum_descriptor() -> ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().enum_by_package_relative_name("Compression").unwrap()).clone()
    }

    fn descriptor(&self) -> ::protobuf::reflect::EnumValueDescriptor {
        let index = match self {
            Compression::Unknown => 0,
            Compression::None => 1,
            Compression::XZ => 2,
        };
        Self::enum_descriptor().value_by_index(index)
    }
}

impl ::std::default::Default for Compression {
    fn default() -> Self {
        Compression::Unknown
    }
}

impl Compression {
    fn generated_enum_descriptor_data() -> ::protobuf::reflect::GeneratedEnumDescriptorData {
        ::protobuf::reflect::GeneratedEnumDescriptorData::new::<Compression>("Compression")
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n/src/message_types/handwriting/handwriting.proto\x12\x0bhandwriting\"w\
    \n\x0bBaseMessage\x12\x1c\n\tCreatedAt\x18\x02\x20\x01(\x10R\tCreatedAt\
    \x12\x0e\n\x02ID\x18\x03\x20\x01(\tR\x02ID\x12:\n\x0bHandwriting\x18\x04\
    \x20\x01(\x0b2\x18.handwriting.HandwritingR\x0bHandwriting\"\xe9\x01\n\
    \x0bHandwriting\x12\x14\n\x05Frame\x18\x03\x20\x01(\x0cR\x05Frame\x12\"\
    \n\x0cStrokesCount\x18\x04\x20\x01(\x03R\x0cStrokesCount\x12:\n\x0bCompr\
    ession\x18\x05\x20\x01(\x0e2\x18.handwriting.CompressionR\x0bCompression\
    \x123\n\x12DecompressedLength\x18\x06\x20\x01(\x03H\0R\x12DecompressedLe\
    ngth\x88\x01\x01\x12\x18\n\x07Strokes\x18\x08\x20\x01(\x0cR\x07StrokesB\
    \x15\n\x13_DecompressedLength*,\n\x0bCompression\x12\x0b\n\x07Unknown\
    \x10\0\x12\x08\n\x04None\x10\x01\x12\x06\n\x02XZ\x10\x04b\x06proto3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(2);
            messages.push(BaseMessage::generated_message_descriptor_data());
            messages.push(Handwriting::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(1);
            enums.push(Compression::generated_enum_descriptor_data());
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
